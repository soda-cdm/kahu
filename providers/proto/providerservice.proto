// Copyright 2022 The SODA Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package kahu.providerservice;

import "google/protobuf/wrappers.proto";
// import "k8s.io/api/core/v1/generated.proto";

option go_package = "lib/go;providerservice";

message GetProviderInfoRequest{}

message GetProviderInfoResponse{
  string provider = 1;
  string version = 2;
  map <string, string> manifest = 3;
}

message GetProviderCapabilitiesRequest{}

message GetProviderCapabilitiesResponse{
  repeated ProviderCapability capabilities = 1;
}

message ProviderCapability {
  message Service {
    enum Type {
      UNKNOWN = 0;
      META_BACKUP_SERVICE = 1;
      VOLUME_BACKUP_SERVICE = 2;
    }
    Type type = 1;
  }
  message MetaBackupServiceSupport {
    enum Type {
      UNKNOWN = 0;
      NEED_SNAPSHOT = 1;
    }
    Type type = 1;
  }

  message VolumeBackupServiceSupport {
    enum Type {
      UNKNOWN = 0;
      NEED_SNAPSHOT = 1;
    }
    Type type = 1;
  }

  oneof type {
    Service service = 1;
    MetaBackupServiceSupport meta_backup_service = 2;
    VolumeBackupServiceSupport volume_backup_service = 3;
  }
}

message ProbeRequest{}

message ProbeResponse {
 google.protobuf.BoolValue ready = 1;
}

message Empty {}

message UploadRequest {
  message FileInfo {
    string file_identifier = 1;
    map <string, string> attributes = 2;
  }

  oneof Data {
    FileInfo info = 1;
    bytes chunk_data = 2;
  }
}

message ObjectExistsRequest {
  string file_identifier = 1;
  map <string, string> attributes = 2;
}

message ObjectExistsResponse{
  bool exists = 1;
}

message DownloadRequest {
  string file_identifier = 1;
  map <string, string> attributes = 2;
}

message DownloadResponse {
  message FileInfo {
    string file_identifier = 1;
    map <string, string> attributes = 2;
  }

  oneof Data {
    FileInfo info = 1;
    bytes chunk_data = 2;
  }
}

message DeleteRequest {
  string file_identifier = 1;
  map <string, string> attributes = 2;
}

service Identity {
  rpc GetProviderInfo(GetProviderInfoRequest)
      returns (GetProviderInfoResponse) {}

  rpc GetProviderCapabilities(GetProviderCapabilitiesRequest)
      returns (GetProviderCapabilitiesResponse) {}

  rpc Probe(ProbeRequest)
      returns (ProbeResponse) {}
}


service MetaBackup {
  rpc Upload(stream UploadRequest)
      returns (Empty) {}

  rpc ObjectExists(ObjectExistsRequest)
      returns (ObjectExistsResponse) {}

  rpc Download(DownloadRequest)
      returns (stream DownloadResponse) {}

  rpc Delete(DeleteRequest)
      returns (Empty) {}
}

message BackupIdentifier {
  k8s.io.api.core.v1.PersistentVolume pv = 1;
  string backup_handle = 2;
  map<string, string> backup_attributes = 3;
}

message VolumeIdentifier {
  string volume_handle = 1;
  map<string, string> volume_attributes = 2;
}

message OwnPVRequest {
  k8s.io.api.core.v1.PersistentVolume pv = 1;
}

message OwnPVResponse {
  google.protobuf.BoolValue success = 1;
}


message StartBackupRequest {
  // Required field
  repeated k8s.io.api.core.v1.PersistentVolume pv = 1;

  // Backup name
  string backup_name = 2;

  // optional
  map<string, string> parameters = 3;
}

message StartBackupResponse {
  // Required field
  repeated BackupIdentifier backup_info = 1;

  repeated string errors = 2;
}

message DeleteBackupRequest {
  // Required field
  repeated BackupIdentifier backup_info = 1;

  // Backup name
  string backup_name = 2;

  // optional
  map<string, string> parameters = 3;
}

message DeleteBackupResponse {
  // Required field
  google.protobuf.BoolValue success = 1;

  repeated string errors = 2;
}

message CancelRequest {
  // Backup or restore identifier based on the request
  string identifier = 1;

  // optional
  map<string, string> parameters = 2;
}

message CancelResponse {
  // Required field
  google.protobuf.BoolValue success = 1;

  repeated string errors = 2;
}

message GetBackupStatRequest {
  // Backup name
  string backup_name = 1;

  // optional
  map<string, string> parameters = 2;
}

message GetBackupStatResponse {
  // optional
  int64 total_bytes = 1;

  // optional
  int64 bytes_done = 2;
}

message CreateVolumeFromBackupRequest {
  // Required field
  repeated BackupIdentifier backup_info = 1;

  // Backup name
  string backup_name = 2;

  // optional
  map<string, string> parameters = 3;
}

message CreateVolumeFromBackupResponse {
  // Required field
  repeated VolumeIdentifier volume_identifiers = 1;

  repeated string errors = 2;
}

message AddVolumeAttributesRequest {
  // Required field
  k8s.io.api.core.v1.PersistentVolume pv = 1;

  // optional
  map<string, string> parameters = 2;
}

message AddVolumeAttributesResponse {
  // Required field
  k8s.io.api.core.v1.PersistentVolume pv = 1;
}

message GetRestoreStatRequest {
  // Restore name
  string restore_name = 1;

  // optional
  map<string, string> parameters = 2;
}

message GetRestoreStatResponse {
  // optional
  int64 total_bytes = 1;

  // optional
  int64 bytes_done = 2;
}

service VolumeBackup {
  // Check if volume is owned by given driver
  rpc IsOwnPV(OwnPVRequest)
      returns (OwnPVResponse) {}

  // Create backup of the provided volumes
  rpc StartBackup(StartBackupRequest)
      returns (StartBackupResponse) {}

  // Delete given backup
  rpc DeleteBackup(DeleteBackupRequest)
      returns (DeleteBackupResponse) {}

  // Cancel given backup
  rpc CancelBackup(CancelRequest)
      returns (CancelResponse) {}

  // Get backup statistics
  rpc GetBackupStat(GetBackupStatRequest)
      returns (GetBackupStatResponse) {}

  // Create volume from backup (for restore)
  rpc CreateVolumeFromBackup(CreateVolumeFromBackupRequest)
      returns (CreateVolumeFromBackupResponse) {}

  // Add attributes to the given volume
  rpc AddVolumeAttributes(AddVolumeAttributesRequest)
      returns (AddVolumeAttributesResponse) {}

  // Cancel given restore
  rpc CancelRestore(CancelRequest)
      returns (CancelResponse) {}

  // Get restore statistics
  rpc GetRestoreStat(GetRestoreStatRequest)
      returns (GetRestoreStatResponse) {}

}
