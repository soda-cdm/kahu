/*
Copyright 2022 The SODA Authors.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";
package kahu.providerservice;

import "google/protobuf/wrappers.proto";
import "k8s.io/api/core/v1/generated.proto";

option go_package = "lib/go;providerservice";

// Get basic information about provider
message GetProviderInfoRequest{}

// Response with basic provider information
message GetProviderInfoResponse{
  // Provider name which is mandatory
  string provider = 1;

  // Provider version which is mandatory
  string version = 2;

  // Optional provider specific parameters
  map <string, string> manifest = 3;
}

// Get different feature level capabilities from provider
message GetProviderCapabilitiesRequest{}

// Response with supported feature level capabilities from provider
message GetProviderCapabilitiesResponse{
  repeated ProviderCapability capabilities = 1;
}

// Supported provider capability
message ProviderCapability {
  // Service types supported
  message Service {
    enum Type {
      UNKNOWN = 0;
      META_BACKUP_SERVICE = 1;
      VOLUME_BACKUP_SERVICE = 2;
    }
    Type type = 1;
  }

  // Supported capabilities specific to metadata backup service
  message MetaBackupServiceSupport {
    enum Type {
      UNKNOWN = 0;
      NEED_SNAPSHOT = 1;
    }
    Type type = 1;
  }

  // Supported capabilities specific to volume backup service
  message VolumeBackupServiceSupport {
    enum Type {
      UNKNOWN = 0;
      NEED_SNAPSHOT = 1;
    }
    Type type = 1;
  }

  oneof type {
    Service service = 1;
    MetaBackupServiceSupport meta_backup_service = 2;
    VolumeBackupServiceSupport volume_backup_service = 3;
  }
}

// Probe request to check health/availability
message ProbeRequest{}

// Response to indicate health/availability status
message ProbeResponse {
 // Indicates if healthy/available or not
 google.protobuf.BoolValue ready = 1;
}

message Empty {}

message UploadRequest {
  // File information and attributes
  message FileInfo {
    string file_identifier = 1;
    map <string, string> attributes = 2;
  }

  oneof Data {
    // File information and attributes
    FileInfo info = 1;

    // File content
    bytes chunk_data = 2;
  }
}

message ObjectExistsRequest {
  // File identifier
  string file_identifier = 1;

  // Provider specific parameters passed in as opaque key-value pairs
  map <string, string> attributes = 2;
}

message ObjectExistsResponse{
  // Indicates if file exists
  bool exists = 1;
}

message DownloadRequest {
  // File identifier
  string file_identifier = 1;

  // Provider specific parameters passed in as opaque key-value pairs
  map <string, string> attributes = 2;
}

message DownloadResponse {
  message FileInfo {
    // File identifier
    string file_identifier = 1;

    // Provider specific parameters passed in as opaque key-value pairs
    map <string, string> attributes = 2;
  }

  oneof Data {
    FileInfo info = 1;

    // File content being downloaded
    bytes chunk_data = 2;
  }
}

message DeleteRequest {
  // File identifier
  string file_identifier = 1;

  // Provider specific parameters passed in as opaque key-value pairs
  map <string, string> attributes = 2;
}

service Identity {
  // Get basic information from the provider
  rpc GetProviderInfo(GetProviderInfoRequest)
      returns (GetProviderInfoResponse) {}

  // Get capabilities from the provider
  rpc GetProviderCapabilities(GetProviderCapabilitiesRequest)
      returns (GetProviderCapabilitiesResponse) {}

  // Probe provider for availability check
  rpc Probe(ProbeRequest)
      returns (ProbeResponse) {}
}

service MetaBackup {
  // Upload input metadata info to configured repo
  rpc Upload(stream UploadRequest)
      returns (Empty) {}

  // Check if the input metadata object exists at configured repo
  rpc ObjectExists(ObjectExistsRequest)
      returns (ObjectExistsResponse) {}

  // Download input metadata info from configured repo
  rpc Download(DownloadRequest)
      returns (stream DownloadResponse) {}

  // Delete input metadata info from configured repo
  rpc Delete(DeleteRequest)
      returns (Empty) {}
}

message BackupIdentifier {
  // Persistent volume info
  k8s.io.api.core.v1.PersistentVolume pv = 1;

   // Backup handle generated at provider
  string backup_handle = 2;

  // Provider specific parameters passed in as opaque key-value pairs
  map<string, string> backup_attributes = 3;
}

message VolumeIdentifier {
  // volume handle created at provider
  string volume_handle = 1;

  // Associated volume attributes
  map<string, string> volume_attributes = 2;
}

message OwnPVRequest {
  // Persistent volume info
  k8s.io.api.core.v1.PersistentVolume pv = 1;
}

message OwnPVResponse {
  // Indicates if PV is owned by given provider or not
  google.protobuf.BoolValue success = 1;
}


message StartBackupRequest {
  // Required field
  repeated k8s.io.api.core.v1.PersistentVolume pv = 1;

  // Backup name
  string backup_name = 2;

  // Optional provider specific parameters passed in as opaque key-value pairs
  map<string, string> parameters = 3;
}

message StartBackupResponse {
  // Required field
  repeated BackupIdentifier backup_info = 1;

  repeated string errors = 2;
}

message DeleteBackupRequest {
  // Required field
  repeated BackupIdentifier backup_info = 1;

  // Backup name
  string backup_name = 2;

  // Optional provider specific parameters passed in as opaque key-value pairs
  map<string, string> parameters = 3;
}

message DeleteBackupResponse {
  // Required field
  google.protobuf.BoolValue success = 1;

  repeated string errors = 2;
}

message CancelRequest {
  // Backup or restore identifier based on the request
  string identifier = 1;

  // Optional provider specific parameters passed in as opaque key-value pairs
  map<string, string> parameters = 2;
}

message CancelResponse {
  // Required field
  google.protobuf.BoolValue success = 1;

  repeated string errors = 2;
}

message GetBackupStatRequest {
  // Backup name
  string backup_name = 1;

  // Optional provider specific parameters passed in as opaque key-value pairs
  map<string, string> parameters = 2;
}

message GetBackupStatResponse {
  // optional
  int64 total_bytes = 1;

  // optional
  int64 bytes_done = 2;
}

message CreateVolumeFromBackupRequest {
  // Required field
  repeated BackupIdentifier backup_info = 1;

  // Backup name
  string backup_name = 2;

  // Optional provider specific parameters passed in as opaque key-value pairs
  map<string, string> parameters = 3;
}

message CreateVolumeFromBackupResponse {
  // Required field
  repeated VolumeIdentifier volume_identifiers = 1;

  repeated string errors = 2;
}

message AddVolumeAttributesRequest {
  // Required field
  k8s.io.api.core.v1.PersistentVolume pv = 1;

  // Optional provider specific parameters passed in as opaque key-value pairs
  map<string, string> parameters = 2;
}

message AddVolumeAttributesResponse {
  // Required field
  k8s.io.api.core.v1.PersistentVolume pv = 1;
}

message GetRestoreStatRequest {
  // Restore name
  string restore_name = 1;

  // Optional provider specific parameters passed in as opaque key-value pairs
  map<string, string> parameters = 2;
}

message GetRestoreStatResponse {
  // Total bytes to be restored, optional
  int64 total_bytes = 1;

  // Total bytes restored, optional
  int64 bytes_done = 2;
}

service VolumeBackup {
  // Check if volume is owned by given driver
  rpc IsOwnPV(OwnPVRequest)
      returns (OwnPVResponse) {}

  // Create backup of the provided volumes
  rpc StartBackup(StartBackupRequest)
      returns (StartBackupResponse) {}

  // Delete given backup
  rpc DeleteBackup(DeleteBackupRequest)
      returns (DeleteBackupResponse) {}

  // Cancel given backup
  rpc CancelBackup(CancelRequest)
      returns (CancelResponse) {}

  // Get backup statistics
  rpc GetBackupStat(GetBackupStatRequest)
      returns (GetBackupStatResponse) {}

  // Create volume from backup (for restore)
  rpc CreateVolumeFromBackup(CreateVolumeFromBackupRequest)
      returns (CreateVolumeFromBackupResponse) {}

  // Add attributes to the given volume
  rpc AddVolumeAttributes(AddVolumeAttributesRequest)
      returns (AddVolumeAttributesResponse) {}

  // Cancel given restore
  rpc CancelRestore(CancelRequest)
      returns (CancelResponse) {}

  // Get restore statistics
  rpc GetRestoreStat(GetRestoreStatRequest)
      returns (GetRestoreStatResponse) {}

}
